buildscript {
	repositories {
		gradlePluginPortal()
		maven { url = 'https://maven.minecraftforge.net' }
		maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '2.3-SNAPSHOT', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.6+'
	}
}
project.ext.pythonFile = project.file('venv/bin/python3')
subprojects {
	apply plugin: 'net.minecraftforge.gradle.forge'
	apply plugin: 'org.spongepowered.mixin'
	apply plugin: 'idea'
	
	archivesBaseName = 'dj2addons'
	group = 'btpos.dj2addons'
	version = '1.2.2'
	
	sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
	compileJava {
		sourceCompatibility = targetCompatibility = '1.8'
	}
	
	runClient {
		args "--username=Dev"//, "--mixin.config=mixins.dj2addons.init.json"
		jvmArgs "-Dforge.logging.console.level=debug", "-Dmixin.debug.verbose=true", "-Dmixin.debug.export=true", "-Dmixin.hotSwap=true"
	}
	
	minecraft {
		version = "1.12.2-14.23.5.2847"
		runDir = "run"
		
		mappings = "stable_39"
		
		replace "@VERSION@", project.version
//		replaceIn "DJ2Addons.java"
	}
	
//	sourceSets.main {
//		resources { srcDir 'src/generated/resources' }
//	}
//
	
	dependencies {
		implementation 'org.spongepowered:mixin:0.8.5'
	}
	
	processResources {
//		dependsOn(copyTestZS)
		// this will ensure that this task is redone when the versions change.
		inputs.property "version", project.version
		inputs.property "mcversion", project.minecraft.version
		
		// replace stuff in mcmod.info, nothing else
		from(sourceSets.main.resources.srcDirs) {
			include 'mcmod.info'
			
			// replace version and mcversion
			expand 'version': project.version, 'mcversion': project.minecraft.version
		}
		
		// copy everything else except the mcmod.info
		from(sourceSets.main.resources.srcDirs) {
			exclude 'mcmod.info'
		}

		//	rename '(.+_at.cfg)', 'META-INF/$1'
	}
	
	
	
	task generateModpackZip(type: Exec, group: 'buildruns') {
		commandLine(rootProject.ext.pythonFile, "./python/GenerateModpackZip.py")
	}
	
	task updateModpack(type: Exec, group: 'buildruns') {
		dependsOn(build)
		commandLine(rootProject.ext.pythonFile, "./python/UpdateModpack.py")
	}
	
	task updateCFModpack(type: Exec, group: 'buildruns') {
		dependsOn(build)
		commandLine(rootProject.ext.pythonFile, "./python/UpdateCFModpack.py")
	}
	
	task copyTestZS(type: Copy) {
		from "./" include "Test.zs" into "./run/scripts"
	}
	
	
	task removeShadedMixinLibraries(type: Exec, group: 'dependencies') {
		commandLine(rootProject.ext.pythonFile, "./python/RemoveShadedMixinLibraries.py")
	}
	
	jar.finalizedBy('reobfJar')
	
	mixin {
		//noinspection GroovyAssignabilityCheck
		add sourceSets.main, 'mixins.dj2addons.refmap.json'
//    config 'mixins.dj2addons.json'
//    hotSwap = true
	}
	
	idea {
		module {
			inheritOutputDirs = true
			downloadSources = false
			downloadJavadoc = true
		}
	}
}

task zendoc(type: JavaExec, group: 'documentation') {
	classpath = project(":mod").sourceSets.main.output.classesDirs + project(":mod").sourceSets.main.compileClasspath + project(":mod").sourceSets.test.output.classesDirs + project(":mod").sourceSets.test.runtimeClasspath // + project(":coremod").sourceSets.main.output.classesDirs + project(":coremod").sourceSets.main.compileClasspath + project(":coremod").sourceSets.test.output.classesDirs + project(":coremod").sourceSets.test.runtimeClasspath
	main = 'ExportZenDocs'
}









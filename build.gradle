buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven {
            name 'FancyGradle'
            url 'https://gitlab.com/api/v4/projects/26758973/packages/maven'
        }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'wtf.gofancy.fancygradle', name: 'wtf.gofancy.fancygradle.gradle.plugin', version: '1.1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'wtf.gofancy.fancygradle'
apply plugin: 'org.spongepowered.mixin'

group = 'org.btpos.dj2addons'
version = '1.0-SNAPSHOT'

java {
    archivesBaseName = 'dj2addons'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            
            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                dj2addons {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            
            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            
            mods {
                dj2addons {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "CurseMaven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    
    implementation(
            'org.spongepowered:mixin:0.8.5:processor',
            
            fg.deobf("vazkii.autoreglib:AutoRegLib:1.3-32.+"),
            fg.deobf("vazkii.quark:Quark:r1.6-+"),
            
            fg.deobf("CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-+")
    )
    
    compileOnly(
            fg.deobf("CraftTweaker2:CraftTweaker2-API:4.1.+"),
            fg.deobf("CraftTweaker2:ZenScript:4.1.+")
            
    )
    
    runtimeOnly(fg.deobf("curse.maven:ErebusFix-400488:3024769")) {
        because "Shades Mixin library."
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "dj2addons",
                "Specification-Vendor"    : "ByThePowerOfScience",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "ByThePowerOfScience",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

fancyGradle {
    patches {
        resources
        coremods
    }
}

mixin {
    add sourceSets.main, 'mixins.dj2addons.refmap.json'
    config 'mixins.dj2addons.json'
    
    debug.verbose = true
    debug.export = true
}

jar.finalizedBy('reobfJar')
